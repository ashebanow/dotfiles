#!/usr/bin/env bash

# based on: https://hiphish.github.io/blog/2020/05/23/how-i-manage-ssh-connections/
# Licensed under [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/)

# This script requires BASH 4.0+

# TODO: support config file "$XDG_CONFIG_HOME/ssh_hosts/config.json"

# I welcome contributions for other TERMINAL and GUI apps via pull request.

SHELL=sh

function usage {
cat <<EOF
Usage: $(basename $0) \\
           [--help|-h] \\
           [--preview|-p] \\
           [--gui | -g] [*fzf|wofi|rofi] \\
           [--terminal | -t] [kitty|tmux|zellij|*none] \\
           NOT YET IMPLEMENTED: [--target | -w] [window|tab|pane|*none] \\
           NOT YET IMPLEMENTED: [--config]

Shows a list of ssh hosts in the specified GUI, read from ~/ssh/config, and
let the user select one. The default GUI is 'fzf'.

Note that the defaults are prefixed by '*' in the usage above.

A connection to the selected host will be opened in the chosen terminal. The
default terminal is 'none', which means we just use stdout.

Note: rofi has a native SSH mode of its own, and you may want to use that
unless you need more sophisticated terminal/target integration kitty.

Options:
  -h, --help        Show this help message. All other options ignored.
  --config          Write a sample config file to stdout. All other options ignored.
  -p, --preview     Show preview in GUI app, if supported.
  -g, --gui         Specify the GUI/TUI used to choose the ssh host.
  -t, --terminal    Terminal app for ssh connection. 'none' means use current tty.
  -w, --target      Type of target for ssh connection. 'none' means just use the
                    current focus.

Not all features are implemented on every combination of gui/terminal/target.
See the tables below for what the current state of things is.

Preview Support:

| GUI  | Preview |
|------|---------|
| fzf  | Y       |
| wofi | N       |
| rofi | N       |

Targeting Support:

| Terminal   | Window | Tab | Pane | None |
|------------|--------|-----|------|------|
| kitty      | ?      | ?   | ?    | Y    |
| tmux       | ?      | ?   | ?    | Y    |
| zellij     | ?      | ?   | ?    | Y    |
| none (tty) | N      | N   | N    | Y    |

| Config File Reading | NOT YET IMPLEMENTED |
|---------------------|---------------------|

EOF
}

function config {
cat << EOF
{
  "show_preview": false,

  // should be one of: fzf, wofi, or rofi
  "gui": "fzf",

  // should be one of: kitty, tmux, zellij, or none
  "terminal": "none",

  // should be one of: window, tab, pane, or none
  "target": "none",
}
EOF
exit 0
}

# Parse command line arguments
SHOW_PREVIEW=0
GUI="fzf"
TERMINAL="none"
TARGET="none"
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      usage
      exit 0
      ;;

    -p|--preview)
      SHOW_PREVIEW=1
      shift
      ;;

    --config)
      config
      ;;

    -g|--gui)
      GUI="${2,,}"
      shift
      shift
      case $GUI in
        fzf|wofi|rofi)
          ;;
        *)
          echo "Unknown terminal app: ${GUI}"
          exit 1
          ;;
      esac
      ;;

    -t|--terminal)
      TERMINAL="${2,,}"
      shift
      shift
      case $TERMINAL in
        kitty|tmux|zellij|none)
          ;;
        *)
          echo "Unknown terminal app: ${TERMINAL}"
          exit 1
          ;;
      esac
      ;;

    -w|--target)
      TARGET="${2,,}"
      shift
      shift
      case $TARGET in
        window|tab|pane|none)
          ;;
        *)
          echo "Unknown target option: ${TARGET}"
          exit 1
          ;;
      esac
      ;;

    *)
      echo "Invalid option: $1"
      usage
      ;;

  esac
done

PROMPT="Choose SSH Host: "

# Get the list of hosts
hosts=()
readarray -t hosts < <(grep '^[[:space:]]*Host[[:space:]]' ~/.ssh/config | cut -d ' ' -f 2)

# filter the default host if present
new_hosts=()
for item in "${hosts[@]}"; do
  if [[ "${item}" != '*' ]]; then
    new_hosts+=("${item}")
  fi
done
hosts=("${new_hosts[@]}")

# use GUI to pick a host from list
case "${GUI}" in
  fzf)
      export FZF_DEFAULT_OPTS="--height=20% --reverse --prompt=\"${PROMPT}\""
      FZF_PREVIEW_CMD='awk -v HOST={} -f ~/.local/bin/ssh_conf_preview.awk ~/.ssh/config'
      if [ $SHOW_PREVIEW == 1 ]; then
        export FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS} --preview='${FZF_PREVIEW_CMD}'"
      fi
      host=$(printf "%s\n" ${hosts[@]} | fzf)
      ;;
  wofi)
      # TODO: investigate previewing using --pre-display-cmd
      if [ $SHOW_PREVIEW == 1 ]; then
        echo "Preview mode not supported in wofi"
        exit 1
      fi
      host=$(printf "%s\n" ${hosts[@]} | wofi -f --dmenu -p "${PROMPT}")
      ;;
  rofi)
      if [ $SHOW_PREVIEW == 1 ]; then
        echo "Preview mode not supported in rofi"
        exit 1
      fi
      host=$(printf "%s\n" ${hosts[@]} | rofi -dmenu -p "${PROMPT}")
      ;;
  *)
      echo "Unknown GUI app: ${GUI}"
      exit 1
      ;;
esac

# echo "Host: ${host}"
if [ $? -ne 0 ]; then
  exit 1
fi
case "${TERMINAL}" in
  kitty)
      echo "Kitty not yet implemented"
      exit 1
      # TODO: process terminal target
      # kitten @ launch --type [window|tab] --cwd current
      # do we then follow with kitten ssh <hostname> or do we pass it as the command to @ launch?
      # likely need allow_remote_control or --remote-control-password to make this work.
      ;;
  none)
      ssh "${host}"
      ;;
  tmux)
      # TODO: process terminal target
      ssh "${host}"
      ;;
  zellij)
      # TODO: process terminal target
      ssh "${host}"
      ;;
  *)
      echo "Unknown terminal app: ${TERMINAL}"
      exit 1
      ;;
esac
