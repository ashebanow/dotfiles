#!/bin/bash
# chezmoi:template:left-delimiter="<!-- " right-delimiter=" -->"

# Install script dependency tracker
# This script runs when install.sh or its dependencies change
# Automatically runs install.sh to ensure everything is up to date

set -euo pipefail

# Dependency tracking - script runs when any of these files change:
# ../install.sh hash: <!-- include "../install.sh" | sha256sum -->
# ../lib/install/main.sh hash: <!-- include "../lib/install/main.sh" | sha256sum -->
# ../lib/common/all.sh hash: <!-- include "../lib/common/all.sh" | sha256sum -->
# ../lib/common/homebrew_utils.sh hash: <!-- include "../lib/common/homebrew_utils.sh" | sha256sum -->
# ../lib/common/logging.sh hash: <!-- include "../lib/common/logging.sh" | sha256sum -->
# ../lib/common/packages.sh hash: <!-- include "../lib/common/packages.sh" | sha256sum -->
# ../lib/common/system_environment.sh hash: <!-- include "../lib/common/system_environment.sh" | sha256sum -->
# ../lib/install/prerequisites.sh hash: <!-- include "../lib/install/prerequisites.sh" | sha256sum -->
# ../lib/install/homebrew_packages.sh hash: <!-- include "../lib/install/homebrew_packages.sh" | sha256sum -->
# ../lib/install/arch.sh hash: <!-- include "../lib/install/arch.sh" | sha256sum -->
# ../lib/install/flatpak_apps.sh hash: <!-- include "../lib/install/flatpak_apps.sh" | sha256sum -->
# ../lib/install/custom.sh hash: <!-- include "../lib/install/custom.sh" | sha256sum -->
# ../lib/install/fonts.sh hash: <!-- include "../lib/install/fonts.sh" | sha256sum -->
# ../lib/install/vscode.sh hash: <!-- include "../lib/install/vscode.sh" | sha256sum -->
# ../lib/install/nix.sh hash: <!-- include "../lib/install/nix.sh" | sha256sum -->

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# Use chezmoi source directory parent (the actual repo root)
DOTFILES_DIR="$(dirname "<!-- .chezmoi.sourceDir -->")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if install.sh exists
INSTALL_SCRIPT="$DOTFILES_DIR/install.sh"
if [[ ! -f "$INSTALL_SCRIPT" ]]; then
    echo -e "${YELLOW}‚ÑπÔ∏è  No install.sh found, skipping dependency update${NC}"
    exit 0
fi

echo ""
echo -e "${BLUE}üîß Installation dependencies have changed!${NC}"
echo ""
echo "Detected changes in installation scripts. Running install.sh to ensure"
echo "all dependencies and packages are up to date..."
echo ""

# Function to run install.sh
run_install() {
    echo -e "${BLUE}üöÄ Running install.sh...${NC}"
    echo ""

    cd "$DOTFILES_DIR"
    if bash "./install.sh"; then
        echo ""
        echo -e "${GREEN}‚úÖ Installation completed successfully!${NC}"
        echo ""
        echo -e "${GREEN}üéâ All dependencies and packages are now up to date.${NC}"
    else
        echo ""
        echo -e "${YELLOW}‚ö†Ô∏è  Installation completed with some warnings${NC}"
        echo "Check the output above for any issues."
        echo ""
        echo "You can manually retry with: cd $DOTFILES_DIR && ./install.sh"
    fi
}

# Function for non-interactive handling
handle_non_interactive() {
    echo -e "${BLUE}ü§ñ Non-interactive mode: Proceeding with automatic installation...${NC}"
    echo ""
    run_install
}

# Function for interactive handling
handle_interactive() {
    echo -e "${YELLOW}This is safe to run - install.sh is designed to be idempotent.${NC}"
    echo ""
    echo "Would you like to run install.sh now? [Y/n] "
    read -r response
    case "$response" in
        [nN]|[nN][oO])
            echo ""
            echo -e "${YELLOW}‚è≠Ô∏è  Skipped automatic installation.${NC}"
            echo ""
            echo "To run installation manually later:"
            echo "  cd $DOTFILES_DIR"
            echo "  ./install.sh"
            ;;
        *)
            echo ""
            run_install
            ;;
    esac
}

# Check if running interactively
if [[ -t 0 ]] && [[ -t 1 ]]; then
    # Interactive mode - ask user
    handle_interactive
else
    # Non-interactive mode - proceed automatically
    handle_non_interactive
fi

echo ""
