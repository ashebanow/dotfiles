name: CI - Comprehensive Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write  # For coverage comments

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Install Just
      uses: extractions/setup-just@v1
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        
    - name: Install Python dependencies
      run: |
        uv sync --dev
        
    - name: Run code quality checks
      run: |
        echo "::group::Code Quality Checks"
        just test-lint
        echo "::endgroup::"
        
    - name: Run Python unit tests with coverage
      run: |
        echo "::group::Python Unit Tests"
        just test-python-coverage
        echo "::endgroup::"
        
    - name: Run package management tests
      run: |
        echo "::group::Package Management Tests"
        just test-packages
        echo "::endgroup::"
        
    - name: Run install script tests
      run: |
        echo "::group::Install Script Tests"
        just test-install
        echo "::endgroup::"
        
    - name: Validate package mappings roundtrip
      run: |
        echo "::group::Package Mapping Validation"
        just validate-roundtrip
        echo "::endgroup::"
        
    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Archive test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts-py${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          .coverage
        retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'integration-tests'))
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Install Just
      uses: extractions/setup-just@v1
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        
    - name: Install Python dependencies
      run: |
        uv sync --dev
        
    - name: Run comprehensive integration tests
      run: |
        echo "::group::Comprehensive Integration Tests"
        ./test.sh integration --verbose
        echo "::endgroup::"
        
    - name: Test package analysis with real data
      run: |
        echo "::group::Real Package Analysis Test"
        # Test with a subset of real packages to avoid API rate limits
        uv run bin/package_analysis.py \
          --package-lists tests/assets/package_mapping/test_simple.toml \
          --output /tmp/test_mappings.toml \
          --cache /tmp/test_cache.json
        echo "✓ Package analysis completed successfully"
        echo "::endgroup::"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Run security scan with bandit
      run: |
        uv run bandit -r bin/ lib/ -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json
        retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check test job results
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "✅ **Unit Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Unit Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check integration tests (may be skipped)
        if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ **Integration Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.integration-tests.result }}" == "skipped" ]]; then
          echo "⏭️ **Integration Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Integration Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check security scan (may be skipped)
        if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "✅ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.security-scan.result }}" == "skipped" ]]; then
          echo "⏭️ **Security Scan**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Security Scan**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Versions**: 3.11, 3.12" >> $GITHUB_STEP_SUMMARY
        echo "- **Runner**: ubuntu-latest" >> $GITHUB_STEP_SUMMARY